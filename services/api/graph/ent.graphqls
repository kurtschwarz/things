directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Asset implements Node {
  id: ID!
  parentID: ID
  locationID: ID!
  name: String!
  quantity: Int!
  modelNumber: String
  serialNumber: String
  parent: Asset
  children: [Asset!]
  location: Location!
  tags: [Tag!]
  assetTags: [AssetTag!]
}
"""A connection to a list of items."""
type AssetConnection {
  """A list of edges."""
  edges: [AssetEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type AssetTag implements Node {
  id: ID!
  assetID: ID!
  tagID: ID!
  asset: Asset!
  tag: Tag!
}
"""
AssetTagWhereInput is used for filtering AssetTag objects.
Input was generated by ent.
"""
input AssetTagWhereInput {
  not: AssetTagWhereInput
  and: [AssetTagWhereInput!]
  or: [AssetTagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
"""
AssetWhereInput is used for filtering Asset objects.
Input was generated by ent.
"""
input AssetWhereInput {
  not: AssetWhereInput
  and: [AssetWhereInput!]
  or: [AssetWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """parent_id field predicates"""
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  """location_id field predicates"""
  locationID: ID
  locationIDNEQ: ID
  locationIDIn: [ID!]
  locationIDNotIn: [ID!]
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """quantity field predicates"""
  quantity: Int
  quantityNEQ: Int
  quantityIn: [Int!]
  quantityNotIn: [Int!]
  quantityGT: Int
  quantityGTE: Int
  quantityLT: Int
  quantityLTE: Int
  """model_number field predicates"""
  modelNumber: String
  modelNumberNEQ: String
  modelNumberIn: [String!]
  modelNumberNotIn: [String!]
  modelNumberGT: String
  modelNumberGTE: String
  modelNumberLT: String
  modelNumberLTE: String
  modelNumberContains: String
  modelNumberHasPrefix: String
  modelNumberHasSuffix: String
  modelNumberIsNil: Boolean
  modelNumberNotNil: Boolean
  modelNumberEqualFold: String
  modelNumberContainsFold: String
  """serial_number field predicates"""
  serialNumber: String
  serialNumberNEQ: String
  serialNumberIn: [String!]
  serialNumberNotIn: [String!]
  serialNumberGT: String
  serialNumberGTE: String
  serialNumberLT: String
  serialNumberLTE: String
  serialNumberContains: String
  serialNumberHasPrefix: String
  serialNumberHasSuffix: String
  serialNumberIsNil: Boolean
  serialNumberNotNil: Boolean
  serialNumberEqualFold: String
  serialNumberContainsFold: String
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [AssetWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [AssetWhereInput!]
  """location edge predicates"""
  hasLocation: Boolean
  hasLocationWith: [LocationWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """asset_tags edge predicates"""
  hasAssetTags: Boolean
  hasAssetTagsWith: [AssetTagWhereInput!]
}
"""
CreateAssetInput is used for create Asset object.
Input was generated by ent.
"""
input CreateAssetInput {
  name: String!
  quantity: Int
  modelNumber: String
  serialNumber: String
  parentID: ID
  childIDs: [ID!]
  locationID: ID!
  tagIDs: [ID!]
}
"""
CreateLocationInput is used for create Location object.
Input was generated by ent.
"""
input CreateLocationInput {
  deletedAt: Time
  name: String
  description: String
  parentID: ID
  childIDs: [ID!]
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  name: String
  assetIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String
  parentID: ID
  childIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Location implements Node {
  id: ID!
  deletedAt: Time
  parentID: ID
  name: String
  description: String
  parent: Location
  children: [Location!]
}
"""A connection to a list of items."""
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
LocationWhereInput is used for filtering Location objects.
Input was generated by ent.
"""
input LocationWhereInput {
  not: LocationWhereInput
  and: [LocationWhereInput!]
  or: [LocationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """parent_id field predicates"""
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [LocationWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [LocationWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "things-api/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  assets(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Assets returned from the connection."""
    where: AssetWhereInput
  ): AssetConnection!
  locations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Locations returned from the connection."""
    where: LocationWhereInput
  ): LocationConnection!
  tags(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Tags returned from the connection."""
    where: TagWhereInput
  ): TagConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type Tag implements Node {
  id: ID!
  name: String
  asset: [Asset!]
  assetTag: [AssetTag!]
}
"""A connection to a list of items."""
type TagConnection {
  """A list of edges."""
  edges: [TagEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """asset edge predicates"""
  hasAsset: Boolean
  hasAssetWith: [AssetWhereInput!]
  """asset_tag edge predicates"""
  hasAssetTag: Boolean
  hasAssetTagWith: [AssetTagWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateAssetInput is used for update Asset object.
Input was generated by ent.
"""
input UpdateAssetInput {
  name: String
  quantity: Int
  modelNumber: String
  clearModelNumber: Boolean
  serialNumber: String
  clearSerialNumber: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  locationID: ID
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
}
"""
UpdateLocationInput is used for update Location object.
Input was generated by ent.
"""
input UpdateLocationInput {
  deletedAt: Time
  clearDeletedAt: Boolean
  name: String
  clearName: Boolean
  description: String
  clearDescription: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
}
"""
UpdateTagInput is used for update Tag object.
Input was generated by ent.
"""
input UpdateTagInput {
  name: String
  clearName: Boolean
  addAssetIDs: [ID!]
  removeAssetIDs: [ID!]
  clearAsset: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  clearName: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
}
type User implements Node {
  id: ID!
  parentID: ID
  name: String
  parent: User
  children: [User!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """parent_id field predicates"""
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [UserWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [UserWhereInput!]
}
