package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"fmt"
	"things-api/ent"
	"things-api/graph/generated"
	"things-api/pkg/util"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	return r.client.Noder(ctx, uuid.MustParse(id))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	return r.client.Noders(ctx, util.StringsToUUIDs(ids))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.client.User.Query().Paginate(ctx, after, first, before, last, ent.WithUserFilter(where.Filter))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return obj.String(), nil
}

// ParentID is the resolver for the parentID field.
func (r *userResolver) ParentID(ctx context.Context, obj *ent.User) (*string, error) {
	return util.StringPtr(obj.ParentID.String()), nil
}

// ParentID is the resolver for the parentID field.
func (r *createUserInputResolver) ParentID(ctx context.Context, obj *ent.CreateUserInput, data *string) error {
	panic(fmt.Errorf("not implemented: ParentID - parentID"))
}

// ChildIDs is the resolver for the childIDs field.
func (r *createUserInputResolver) ChildIDs(ctx context.Context, obj *ent.CreateUserInput, data []string) error {
	panic(fmt.Errorf("not implemented: ChildIDs - childIDs"))
}

// ParentID is the resolver for the parentID field.
func (r *updateUserInputResolver) ParentID(ctx context.Context, obj *ent.UpdateUserInput, data *string) error {
	panic(fmt.Errorf("not implemented: ParentID - parentID"))
}

// AddChildIDs is the resolver for the addChildIDs field.
func (r *updateUserInputResolver) AddChildIDs(ctx context.Context, obj *ent.UpdateUserInput, data []string) error {
	panic(fmt.Errorf("not implemented: AddChildIDs - addChildIDs"))
}

// RemoveChildIDs is the resolver for the removeChildIDs field.
func (r *updateUserInputResolver) RemoveChildIDs(ctx context.Context, obj *ent.UpdateUserInput, data []string) error {
	panic(fmt.Errorf("not implemented: RemoveChildIDs - removeChildIDs"))
}

// ID is the resolver for the id field.
func (r *userWhereInputResolver) ID(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *userWhereInputResolver) IDNeq(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *userWhereInputResolver) IDIn(ctx context.Context, obj *ent.UserWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *userWhereInputResolver) IDNotIn(ctx context.Context, obj *ent.UserWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *userWhereInputResolver) IDGt(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *userWhereInputResolver) IDGte(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *userWhereInputResolver) IDLt(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *userWhereInputResolver) IDLte(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ParentID is the resolver for the parentID field.
func (r *userWhereInputResolver) ParentID(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ParentID - parentID"))
}

// ParentIDNeq is the resolver for the parentIDNEQ field.
func (r *userWhereInputResolver) ParentIDNeq(ctx context.Context, obj *ent.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ParentIDNeq - parentIDNEQ"))
}

// ParentIDIn is the resolver for the parentIDIn field.
func (r *userWhereInputResolver) ParentIDIn(ctx context.Context, obj *ent.UserWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: ParentIDIn - parentIDIn"))
}

// ParentIDNotIn is the resolver for the parentIDNotIn field.
func (r *userWhereInputResolver) ParentIDNotIn(ctx context.Context, obj *ent.UserWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: ParentIDNotIn - parentIDNotIn"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// CreateUserInput returns generated.CreateUserInputResolver implementation.
func (r *Resolver) CreateUserInput() generated.CreateUserInputResolver {
	return &createUserInputResolver{r}
}

// UpdateUserInput returns generated.UpdateUserInputResolver implementation.
func (r *Resolver) UpdateUserInput() generated.UpdateUserInputResolver {
	return &updateUserInputResolver{r}
}

// UserWhereInput returns generated.UserWhereInputResolver implementation.
func (r *Resolver) UserWhereInput() generated.UserWhereInputResolver {
	return &userWhereInputResolver{r}
}

type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type createUserInputResolver struct{ *Resolver }
type updateUserInputResolver struct{ *Resolver }
type userWhereInputResolver struct{ *Resolver }
