package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"things-api/ent"
	"things-api/ent/location"

	"github.com/google/uuid"
)

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input ent.CreateLocationInput) (*ent.Location, error) {
	return r.client.Location.Create().SetInput(input).Save(ctx)
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, id string, input ent.UpdateLocationInput) (*ent.Location, error) {
	return r.client.Location.UpdateOneID(uuid.MustParse(id)).SetInput(input).Save(ctx)
}

// DeleteLocation is the resolver for the deleteLocation field.
func (r *mutationResolver) DeleteLocation(ctx context.Context, id string) (bool, error) {
	var findAllLocationsIDsToDelete func(locationID uuid.UUID, locationIDs []uuid.UUID) ([]uuid.UUID, error)
	findAllLocationsIDsToDelete = func(locationID uuid.UUID, locationIDs []uuid.UUID) ([]uuid.UUID, error) {
		locationIDs = append(locationIDs, locationID)
		location, err := r.client.Location.Query().
			Where(location.ID(locationID)).
			WithChildren(func(q *ent.LocationQuery) {
				q.WithChildren()
			}).
			Only(ctx)

		if err != nil {
			return nil, err
		}

		for _, child := range location.Edges.Children {
			locationIDs = append(locationIDs, child.ID)
			if child.Edges.Children != nil && len(child.Edges.Children) > 0 {
				return findAllLocationsIDsToDelete(child.ID, locationIDs)
			}
		}

		return locationIDs, nil
	}

	locationIDs, err := findAllLocationsIDsToDelete(uuid.MustParse(id), []uuid.UUID{})
	if err != nil {
		return false, err
	}

	_, err = r.client.Location.Delete().Where(location.IDIn(locationIDs...)).Exec(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}
