// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"things-api/ent/asset"
	"things-api/ent/assettag"
	"things-api/ent/tag"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AssetTagCreate is the builder for creating a AssetTag entity.
type AssetTagCreate struct {
	config
	mutation *AssetTagMutation
	hooks    []Hook
}

// SetAssetID sets the "asset_id" field.
func (atc *AssetTagCreate) SetAssetID(u uuid.UUID) *AssetTagCreate {
	atc.mutation.SetAssetID(u)
	return atc
}

// SetTagID sets the "tag_id" field.
func (atc *AssetTagCreate) SetTagID(u uuid.UUID) *AssetTagCreate {
	atc.mutation.SetTagID(u)
	return atc
}

// SetID sets the "id" field.
func (atc *AssetTagCreate) SetID(u uuid.UUID) *AssetTagCreate {
	atc.mutation.SetID(u)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *AssetTagCreate) SetNillableID(u *uuid.UUID) *AssetTagCreate {
	if u != nil {
		atc.SetID(*u)
	}
	return atc
}

// SetAsset sets the "asset" edge to the Asset entity.
func (atc *AssetTagCreate) SetAsset(a *Asset) *AssetTagCreate {
	return atc.SetAssetID(a.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (atc *AssetTagCreate) SetTag(t *Tag) *AssetTagCreate {
	return atc.SetTagID(t.ID)
}

// Mutation returns the AssetTagMutation object of the builder.
func (atc *AssetTagCreate) Mutation() *AssetTagMutation {
	return atc.mutation
}

// Save creates the AssetTag in the database.
func (atc *AssetTagCreate) Save(ctx context.Context) (*AssetTag, error) {
	atc.defaults()
	return withHooks[*AssetTag, AssetTagMutation](ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AssetTagCreate) SaveX(ctx context.Context) *AssetTag {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AssetTagCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AssetTagCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AssetTagCreate) defaults() {
	if _, ok := atc.mutation.ID(); !ok {
		v := assettag.DefaultID()
		atc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AssetTagCreate) check() error {
	if _, ok := atc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "asset_id", err: errors.New(`ent: missing required field "AssetTag.asset_id"`)}
	}
	if _, ok := atc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "AssetTag.tag_id"`)}
	}
	if _, ok := atc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "asset", err: errors.New(`ent: missing required edge "AssetTag.asset"`)}
	}
	if _, ok := atc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "AssetTag.tag"`)}
	}
	return nil
}

func (atc *AssetTagCreate) sqlSave(ctx context.Context) (*AssetTag, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AssetTagCreate) createSpec() (*AssetTag, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetTag{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(assettag.Table, sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID))
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := atc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettag.AssetTable,
			Columns: []string{assettag.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettag.TagTable,
			Columns: []string{assettag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssetTagCreateBulk is the builder for creating many AssetTag entities in bulk.
type AssetTagCreateBulk struct {
	config
	builders []*AssetTagCreate
}

// Save creates the AssetTag entities in the database.
func (atcb *AssetTagCreateBulk) Save(ctx context.Context) ([]*AssetTag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AssetTag, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AssetTagCreateBulk) SaveX(ctx context.Context) []*AssetTag {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AssetTagCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AssetTagCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
