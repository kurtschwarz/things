// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"things-api/ent/asset"
	"things-api/ent/assettag"
	"things-api/ent/location"
	"things-api/ent/predicate"
	"things-api/ent/tag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks    []Hook
	mutation *AssetMutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetParentID sets the "parent_id" field.
func (au *AssetUpdate) SetParentID(u uuid.UUID) *AssetUpdate {
	au.mutation.SetParentID(u)
	return au
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableParentID(u *uuid.UUID) *AssetUpdate {
	if u != nil {
		au.SetParentID(*u)
	}
	return au
}

// ClearParentID clears the value of the "parent_id" field.
func (au *AssetUpdate) ClearParentID() *AssetUpdate {
	au.mutation.ClearParentID()
	return au
}

// SetLocationID sets the "location_id" field.
func (au *AssetUpdate) SetLocationID(u uuid.UUID) *AssetUpdate {
	au.mutation.SetLocationID(u)
	return au
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableLocationID(u *uuid.UUID) *AssetUpdate {
	if u != nil {
		au.SetLocationID(*u)
	}
	return au
}

// ClearLocationID clears the value of the "location_id" field.
func (au *AssetUpdate) ClearLocationID() *AssetUpdate {
	au.mutation.ClearLocationID()
	return au
}

// SetName sets the "name" field.
func (au *AssetUpdate) SetName(s string) *AssetUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AssetUpdate) SetNillableName(s *string) *AssetUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AssetUpdate) ClearName() *AssetUpdate {
	au.mutation.ClearName()
	return au
}

// SetParent sets the "parent" edge to the Asset entity.
func (au *AssetUpdate) SetParent(a *Asset) *AssetUpdate {
	return au.SetParentID(a.ID)
}

// AddChildIDs adds the "children" edge to the Asset entity by IDs.
func (au *AssetUpdate) AddChildIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.AddChildIDs(ids...)
	return au
}

// AddChildren adds the "children" edges to the Asset entity.
func (au *AssetUpdate) AddChildren(a ...*Asset) *AssetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddChildIDs(ids...)
}

// SetLocation sets the "location" edge to the Location entity.
func (au *AssetUpdate) SetLocation(l *Location) *AssetUpdate {
	return au.SetLocationID(l.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (au *AssetUpdate) AddTagIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.AddTagIDs(ids...)
	return au
}

// AddTags adds the "tags" edges to the Tag entity.
func (au *AssetUpdate) AddTags(t ...*Tag) *AssetUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTagIDs(ids...)
}

// AddAssetTagIDs adds the "asset_tags" edge to the AssetTag entity by IDs.
func (au *AssetUpdate) AddAssetTagIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.AddAssetTagIDs(ids...)
	return au
}

// AddAssetTags adds the "asset_tags" edges to the AssetTag entity.
func (au *AssetUpdate) AddAssetTags(a ...*AssetTag) *AssetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAssetTagIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// ClearParent clears the "parent" edge to the Asset entity.
func (au *AssetUpdate) ClearParent() *AssetUpdate {
	au.mutation.ClearParent()
	return au
}

// ClearChildren clears all "children" edges to the Asset entity.
func (au *AssetUpdate) ClearChildren() *AssetUpdate {
	au.mutation.ClearChildren()
	return au
}

// RemoveChildIDs removes the "children" edge to Asset entities by IDs.
func (au *AssetUpdate) RemoveChildIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.RemoveChildIDs(ids...)
	return au
}

// RemoveChildren removes "children" edges to Asset entities.
func (au *AssetUpdate) RemoveChildren(a ...*Asset) *AssetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveChildIDs(ids...)
}

// ClearLocation clears the "location" edge to the Location entity.
func (au *AssetUpdate) ClearLocation() *AssetUpdate {
	au.mutation.ClearLocation()
	return au
}

// ClearTags clears all "tags" edges to the Tag entity.
func (au *AssetUpdate) ClearTags() *AssetUpdate {
	au.mutation.ClearTags()
	return au
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (au *AssetUpdate) RemoveTagIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.RemoveTagIDs(ids...)
	return au
}

// RemoveTags removes "tags" edges to Tag entities.
func (au *AssetUpdate) RemoveTags(t ...*Tag) *AssetUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTagIDs(ids...)
}

// ClearAssetTags clears all "asset_tags" edges to the AssetTag entity.
func (au *AssetUpdate) ClearAssetTags() *AssetUpdate {
	au.mutation.ClearAssetTags()
	return au
}

// RemoveAssetTagIDs removes the "asset_tags" edge to AssetTag entities by IDs.
func (au *AssetUpdate) RemoveAssetTagIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.RemoveAssetTagIDs(ids...)
	return au
}

// RemoveAssetTags removes "asset_tags" edges to AssetTag entities.
func (au *AssetUpdate) RemoveAssetTags(a ...*AssetTag) *AssetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAssetTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AssetMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if au.mutation.NameCleared() {
		_spec.ClearField(asset.FieldName, field.TypeString)
	}
	if au.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ChildrenTable,
			Columns: []string{asset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !au.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ChildrenTable,
			Columns: []string{asset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ChildrenTable,
			Columns: []string{asset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.LocationTable,
			Columns: []string{asset.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.LocationTable,
			Columns: []string{asset.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.TagsTable,
			Columns: asset.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		createE := &AssetTagCreate{config: au.config, mutation: newAssetTagMutation(au.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTagsIDs(); len(nodes) > 0 && !au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.TagsTable,
			Columns: asset.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AssetTagCreate{config: au.config, mutation: newAssetTagMutation(au.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.TagsTable,
			Columns: asset.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AssetTagCreate{config: au.config, mutation: newAssetTagMutation(au.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AssetTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   asset.AssetTagsTable,
			Columns: []string{asset.AssetTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAssetTagsIDs(); len(nodes) > 0 && !au.mutation.AssetTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   asset.AssetTagsTable,
			Columns: []string{asset.AssetTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AssetTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   asset.AssetTagsTable,
			Columns: []string{asset.AssetTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetMutation
}

// SetParentID sets the "parent_id" field.
func (auo *AssetUpdateOne) SetParentID(u uuid.UUID) *AssetUpdateOne {
	auo.mutation.SetParentID(u)
	return auo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableParentID(u *uuid.UUID) *AssetUpdateOne {
	if u != nil {
		auo.SetParentID(*u)
	}
	return auo
}

// ClearParentID clears the value of the "parent_id" field.
func (auo *AssetUpdateOne) ClearParentID() *AssetUpdateOne {
	auo.mutation.ClearParentID()
	return auo
}

// SetLocationID sets the "location_id" field.
func (auo *AssetUpdateOne) SetLocationID(u uuid.UUID) *AssetUpdateOne {
	auo.mutation.SetLocationID(u)
	return auo
}

// SetNillableLocationID sets the "location_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableLocationID(u *uuid.UUID) *AssetUpdateOne {
	if u != nil {
		auo.SetLocationID(*u)
	}
	return auo
}

// ClearLocationID clears the value of the "location_id" field.
func (auo *AssetUpdateOne) ClearLocationID() *AssetUpdateOne {
	auo.mutation.ClearLocationID()
	return auo
}

// SetName sets the "name" field.
func (auo *AssetUpdateOne) SetName(s string) *AssetUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableName(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AssetUpdateOne) ClearName() *AssetUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetParent sets the "parent" edge to the Asset entity.
func (auo *AssetUpdateOne) SetParent(a *Asset) *AssetUpdateOne {
	return auo.SetParentID(a.ID)
}

// AddChildIDs adds the "children" edge to the Asset entity by IDs.
func (auo *AssetUpdateOne) AddChildIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.AddChildIDs(ids...)
	return auo
}

// AddChildren adds the "children" edges to the Asset entity.
func (auo *AssetUpdateOne) AddChildren(a ...*Asset) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddChildIDs(ids...)
}

// SetLocation sets the "location" edge to the Location entity.
func (auo *AssetUpdateOne) SetLocation(l *Location) *AssetUpdateOne {
	return auo.SetLocationID(l.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (auo *AssetUpdateOne) AddTagIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.AddTagIDs(ids...)
	return auo
}

// AddTags adds the "tags" edges to the Tag entity.
func (auo *AssetUpdateOne) AddTags(t ...*Tag) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTagIDs(ids...)
}

// AddAssetTagIDs adds the "asset_tags" edge to the AssetTag entity by IDs.
func (auo *AssetUpdateOne) AddAssetTagIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.AddAssetTagIDs(ids...)
	return auo
}

// AddAssetTags adds the "asset_tags" edges to the AssetTag entity.
func (auo *AssetUpdateOne) AddAssetTags(a ...*AssetTag) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAssetTagIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// ClearParent clears the "parent" edge to the Asset entity.
func (auo *AssetUpdateOne) ClearParent() *AssetUpdateOne {
	auo.mutation.ClearParent()
	return auo
}

// ClearChildren clears all "children" edges to the Asset entity.
func (auo *AssetUpdateOne) ClearChildren() *AssetUpdateOne {
	auo.mutation.ClearChildren()
	return auo
}

// RemoveChildIDs removes the "children" edge to Asset entities by IDs.
func (auo *AssetUpdateOne) RemoveChildIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.RemoveChildIDs(ids...)
	return auo
}

// RemoveChildren removes "children" edges to Asset entities.
func (auo *AssetUpdateOne) RemoveChildren(a ...*Asset) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveChildIDs(ids...)
}

// ClearLocation clears the "location" edge to the Location entity.
func (auo *AssetUpdateOne) ClearLocation() *AssetUpdateOne {
	auo.mutation.ClearLocation()
	return auo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (auo *AssetUpdateOne) ClearTags() *AssetUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (auo *AssetUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.RemoveTagIDs(ids...)
	return auo
}

// RemoveTags removes "tags" edges to Tag entities.
func (auo *AssetUpdateOne) RemoveTags(t ...*Tag) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTagIDs(ids...)
}

// ClearAssetTags clears all "asset_tags" edges to the AssetTag entity.
func (auo *AssetUpdateOne) ClearAssetTags() *AssetUpdateOne {
	auo.mutation.ClearAssetTags()
	return auo
}

// RemoveAssetTagIDs removes the "asset_tags" edge to AssetTag entities by IDs.
func (auo *AssetUpdateOne) RemoveAssetTagIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.RemoveAssetTagIDs(ids...)
	return auo
}

// RemoveAssetTags removes "asset_tags" edges to AssetTag entities.
func (auo *AssetUpdateOne) RemoveAssetTags(a ...*AssetTag) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAssetTagIDs(ids...)
}

// Where appends a list predicates to the AssetUpdate builder.
func (auo *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	return withHooks[*Asset, AssetMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if auo.mutation.NameCleared() {
		_spec.ClearField(asset.FieldName, field.TypeString)
	}
	if auo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ChildrenTable,
			Columns: []string{asset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !auo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ChildrenTable,
			Columns: []string{asset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ChildrenTable,
			Columns: []string{asset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.LocationTable,
			Columns: []string{asset.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.LocationTable,
			Columns: []string{asset.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.TagsTable,
			Columns: asset.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		createE := &AssetTagCreate{config: auo.config, mutation: newAssetTagMutation(auo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.TagsTable,
			Columns: asset.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AssetTagCreate{config: auo.config, mutation: newAssetTagMutation(auo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.TagsTable,
			Columns: asset.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AssetTagCreate{config: auo.config, mutation: newAssetTagMutation(auo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AssetTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   asset.AssetTagsTable,
			Columns: []string{asset.AssetTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAssetTagsIDs(); len(nodes) > 0 && !auo.mutation.AssetTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   asset.AssetTagsTable,
			Columns: []string{asset.AssetTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AssetTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   asset.AssetTagsTable,
			Columns: []string{asset.AssetTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
