// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
)

// CreateAssetInput represents a mutation input for creating assets.
type CreateAssetInput struct {
	Name         string
	Quantity     *int
	ModelNumber  *string
	SerialNumber *string
	ParentID     *uuid.UUID
	ChildIDs     []uuid.UUID
	LocationID   uuid.UUID
	TagIDs       []uuid.UUID
}

// Mutate applies the CreateAssetInput on the AssetMutation builder.
func (i *CreateAssetInput) Mutate(m *AssetMutation) {
	m.SetName(i.Name)
	if v := i.Quantity; v != nil {
		m.SetQuantity(*v)
	}
	if v := i.ModelNumber; v != nil {
		m.SetModelNumber(*v)
	}
	if v := i.SerialNumber; v != nil {
		m.SetSerialNumber(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	m.SetLocationID(i.LocationID)
	if v := i.TagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAssetInput on the AssetCreate builder.
func (c *AssetCreate) SetInput(i CreateAssetInput) *AssetCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAssetInput represents a mutation input for updating assets.
type UpdateAssetInput struct {
	Name              *string
	Quantity          *int
	ClearModelNumber  bool
	ModelNumber       *string
	ClearSerialNumber bool
	SerialNumber      *string
	ClearParent       bool
	ParentID          *uuid.UUID
	ClearChildren     bool
	AddChildIDs       []uuid.UUID
	RemoveChildIDs    []uuid.UUID
	LocationID        *uuid.UUID
	ClearTags         bool
	AddTagIDs         []uuid.UUID
	RemoveTagIDs      []uuid.UUID
}

// Mutate applies the UpdateAssetInput on the AssetMutation builder.
func (i *UpdateAssetInput) Mutate(m *AssetMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Quantity; v != nil {
		m.SetQuantity(*v)
	}
	if i.ClearModelNumber {
		m.ClearModelNumber()
	}
	if v := i.ModelNumber; v != nil {
		m.SetModelNumber(*v)
	}
	if i.ClearSerialNumber {
		m.ClearSerialNumber()
	}
	if v := i.SerialNumber; v != nil {
		m.SetSerialNumber(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
	if v := i.LocationID; v != nil {
		m.SetLocationID(*v)
	}
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.AddTagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.RemoveTagIDs; len(v) > 0 {
		m.RemoveTagIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAssetInput on the AssetUpdate builder.
func (c *AssetUpdate) SetInput(i UpdateAssetInput) *AssetUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAssetInput on the AssetUpdateOne builder.
func (c *AssetUpdateOne) SetInput(i UpdateAssetInput) *AssetUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateLocationInput represents a mutation input for creating locations.
type CreateLocationInput struct {
	DeletedAt   *time.Time
	Name        *string
	Description *string
	ParentID    *uuid.UUID
	ChildIDs    []uuid.UUID
}

// Mutate applies the CreateLocationInput on the LocationMutation builder.
func (i *CreateLocationInput) Mutate(m *LocationMutation) {
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLocationInput on the LocationCreate builder.
func (c *LocationCreate) SetInput(i CreateLocationInput) *LocationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLocationInput represents a mutation input for updating locations.
type UpdateLocationInput struct {
	ClearDeletedAt   bool
	DeletedAt        *time.Time
	ClearName        bool
	Name             *string
	ClearDescription bool
	Description      *string
	ClearParent      bool
	ParentID         *uuid.UUID
	ClearChildren    bool
	AddChildIDs      []uuid.UUID
	RemoveChildIDs   []uuid.UUID
}

// Mutate applies the UpdateLocationInput on the LocationMutation builder.
func (i *UpdateLocationInput) Mutate(m *LocationMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdate builder.
func (c *LocationUpdate) SetInput(i UpdateLocationInput) *LocationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLocationInput on the LocationUpdateOne builder.
func (c *LocationUpdateOne) SetInput(i UpdateLocationInput) *LocationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTagInput represents a mutation input for creating tags.
type CreateTagInput struct {
	Name     *string
	AssetIDs []uuid.UUID
}

// Mutate applies the CreateTagInput on the TagMutation builder.
func (i *CreateTagInput) Mutate(m *TagMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AssetIDs; len(v) > 0 {
		m.AddAssetIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTagInput on the TagCreate builder.
func (c *TagCreate) SetInput(i CreateTagInput) *TagCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTagInput represents a mutation input for updating tags.
type UpdateTagInput struct {
	ClearName      bool
	Name           *string
	ClearAsset     bool
	AddAssetIDs    []uuid.UUID
	RemoveAssetIDs []uuid.UUID
}

// Mutate applies the UpdateTagInput on the TagMutation builder.
func (i *UpdateTagInput) Mutate(m *TagMutation) {
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearAsset {
		m.ClearAsset()
	}
	if v := i.AddAssetIDs; len(v) > 0 {
		m.AddAssetIDs(v...)
	}
	if v := i.RemoveAssetIDs; len(v) > 0 {
		m.RemoveAssetIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTagInput on the TagUpdate builder.
func (c *TagUpdate) SetInput(i UpdateTagInput) *TagUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTagInput on the TagUpdateOne builder.
func (c *TagUpdateOne) SetInput(i UpdateTagInput) *TagUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name     *string
	ParentID *uuid.UUID
	ChildIDs []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ClearName      bool
	Name           *string
	ClearParent    bool
	ParentID       *uuid.UUID
	ClearChildren  bool
	AddChildIDs    []uuid.UUID
	RemoveChildIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
