// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"things-api/ent/asset"
	"things-api/ent/location"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Asset is the model entity for the Asset schema.
type Asset struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID uuid.UUID `json:"parent_id,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID uuid.UUID `json:"location_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetQuery when eager-loading is set.
	Edges        AssetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetEdges holds the relations/edges for other nodes in the graph.
type AssetEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Asset `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Asset `json:"children,omitempty"`
	// Location holds the value of the location edge.
	Location *Location `json:"location,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// AssetTags holds the value of the asset_tags edge.
	AssetTags []*AssetTag `json:"asset_tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedChildren  map[string][]*Asset
	namedTags      map[string][]*Tag
	namedAssetTags map[string][]*AssetTag
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) ParentOrErr() (*Asset, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: asset.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) ChildrenOrErr() ([]*Asset, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) LocationOrErr() (*Location, error) {
	if e.loadedTypes[2] {
		if e.Location == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: location.Label}
		}
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "location"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[3] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// AssetTagsOrErr returns the AssetTags value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) AssetTagsOrErr() ([]*AssetTag, error) {
	if e.loadedTypes[4] {
		return e.AssetTags, nil
	}
	return nil, &NotLoadedError{edge: "asset_tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Asset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asset.FieldName:
			values[i] = new(sql.NullString)
		case asset.FieldID, asset.FieldParentID, asset.FieldLocationID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Asset fields.
func (a *Asset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case asset.FieldParentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value != nil {
				a.ParentID = *value
			}
		case asset.FieldLocationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value != nil {
				a.LocationID = *value
			}
		case asset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Asset.
// This includes values selected through modifiers, order, etc.
func (a *Asset) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Asset entity.
func (a *Asset) QueryParent() *AssetQuery {
	return NewAssetClient(a.config).QueryParent(a)
}

// QueryChildren queries the "children" edge of the Asset entity.
func (a *Asset) QueryChildren() *AssetQuery {
	return NewAssetClient(a.config).QueryChildren(a)
}

// QueryLocation queries the "location" edge of the Asset entity.
func (a *Asset) QueryLocation() *LocationQuery {
	return NewAssetClient(a.config).QueryLocation(a)
}

// QueryTags queries the "tags" edge of the Asset entity.
func (a *Asset) QueryTags() *TagQuery {
	return NewAssetClient(a.config).QueryTags(a)
}

// QueryAssetTags queries the "asset_tags" edge of the Asset entity.
func (a *Asset) QueryAssetTags() *AssetTagQuery {
	return NewAssetClient(a.config).QueryAssetTags(a)
}

// Update returns a builder for updating this Asset.
// Note that you need to call Asset.Unwrap() before calling this method if this Asset
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Asset) Update() *AssetUpdateOne {
	return NewAssetClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Asset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Asset) Unwrap() *Asset {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Asset is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Asset) String() string {
	var builder strings.Builder
	builder.WriteString("Asset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ParentID))
	builder.WriteString(", ")
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", a.LocationID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Asset) NamedChildren(name string) ([]*Asset, error) {
	if a.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Asset) appendNamedChildren(name string, edges ...*Asset) {
	if a.Edges.namedChildren == nil {
		a.Edges.namedChildren = make(map[string][]*Asset)
	}
	if len(edges) == 0 {
		a.Edges.namedChildren[name] = []*Asset{}
	} else {
		a.Edges.namedChildren[name] = append(a.Edges.namedChildren[name], edges...)
	}
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Asset) NamedTags(name string) ([]*Tag, error) {
	if a.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Asset) appendNamedTags(name string, edges ...*Tag) {
	if a.Edges.namedTags == nil {
		a.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		a.Edges.namedTags[name] = []*Tag{}
	} else {
		a.Edges.namedTags[name] = append(a.Edges.namedTags[name], edges...)
	}
}

// NamedAssetTags returns the AssetTags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Asset) NamedAssetTags(name string) ([]*AssetTag, error) {
	if a.Edges.namedAssetTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedAssetTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Asset) appendNamedAssetTags(name string, edges ...*AssetTag) {
	if a.Edges.namedAssetTags == nil {
		a.Edges.namedAssetTags = make(map[string][]*AssetTag)
	}
	if len(edges) == 0 {
		a.Edges.namedAssetTags[name] = []*AssetTag{}
	} else {
		a.Edges.namedAssetTags[name] = append(a.Edges.namedAssetTags[name], edges...)
	}
}

// Assets is a parsable slice of Asset.
type Assets []*Asset
