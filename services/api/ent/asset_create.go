// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"things-api/ent/asset"
	"things-api/ent/assettag"
	"things-api/ent/location"
	"things-api/ent/tag"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AssetCreate is the builder for creating a Asset entity.
type AssetCreate struct {
	config
	mutation *AssetMutation
	hooks    []Hook
}

// SetParentID sets the "parent_id" field.
func (ac *AssetCreate) SetParentID(u uuid.UUID) *AssetCreate {
	ac.mutation.SetParentID(u)
	return ac
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableParentID(u *uuid.UUID) *AssetCreate {
	if u != nil {
		ac.SetParentID(*u)
	}
	return ac
}

// SetLocationID sets the "location_id" field.
func (ac *AssetCreate) SetLocationID(u uuid.UUID) *AssetCreate {
	ac.mutation.SetLocationID(u)
	return ac
}

// SetName sets the "name" field.
func (ac *AssetCreate) SetName(s string) *AssetCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetQuantity sets the "quantity" field.
func (ac *AssetCreate) SetQuantity(i int) *AssetCreate {
	ac.mutation.SetQuantity(i)
	return ac
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ac *AssetCreate) SetNillableQuantity(i *int) *AssetCreate {
	if i != nil {
		ac.SetQuantity(*i)
	}
	return ac
}

// SetModelNumber sets the "model_number" field.
func (ac *AssetCreate) SetModelNumber(s string) *AssetCreate {
	ac.mutation.SetModelNumber(s)
	return ac
}

// SetNillableModelNumber sets the "model_number" field if the given value is not nil.
func (ac *AssetCreate) SetNillableModelNumber(s *string) *AssetCreate {
	if s != nil {
		ac.SetModelNumber(*s)
	}
	return ac
}

// SetSerialNumber sets the "serial_number" field.
func (ac *AssetCreate) SetSerialNumber(s string) *AssetCreate {
	ac.mutation.SetSerialNumber(s)
	return ac
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ac *AssetCreate) SetNillableSerialNumber(s *string) *AssetCreate {
	if s != nil {
		ac.SetSerialNumber(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AssetCreate) SetID(u uuid.UUID) *AssetCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableID(u *uuid.UUID) *AssetCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetParent sets the "parent" edge to the Asset entity.
func (ac *AssetCreate) SetParent(a *Asset) *AssetCreate {
	return ac.SetParentID(a.ID)
}

// AddChildIDs adds the "children" edge to the Asset entity by IDs.
func (ac *AssetCreate) AddChildIDs(ids ...uuid.UUID) *AssetCreate {
	ac.mutation.AddChildIDs(ids...)
	return ac
}

// AddChildren adds the "children" edges to the Asset entity.
func (ac *AssetCreate) AddChildren(a ...*Asset) *AssetCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddChildIDs(ids...)
}

// SetLocation sets the "location" edge to the Location entity.
func (ac *AssetCreate) SetLocation(l *Location) *AssetCreate {
	return ac.SetLocationID(l.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ac *AssetCreate) AddTagIDs(ids ...uuid.UUID) *AssetCreate {
	ac.mutation.AddTagIDs(ids...)
	return ac
}

// AddTags adds the "tags" edges to the Tag entity.
func (ac *AssetCreate) AddTags(t ...*Tag) *AssetCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddTagIDs(ids...)
}

// AddAssetTagIDs adds the "asset_tags" edge to the AssetTag entity by IDs.
func (ac *AssetCreate) AddAssetTagIDs(ids ...uuid.UUID) *AssetCreate {
	ac.mutation.AddAssetTagIDs(ids...)
	return ac
}

// AddAssetTags adds the "asset_tags" edges to the AssetTag entity.
func (ac *AssetCreate) AddAssetTags(a ...*AssetTag) *AssetCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAssetTagIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (ac *AssetCreate) Mutation() *AssetMutation {
	return ac.mutation
}

// Save creates the Asset in the database.
func (ac *AssetCreate) Save(ctx context.Context) (*Asset, error) {
	ac.defaults()
	return withHooks[*Asset, AssetMutation](ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssetCreate) SaveX(ctx context.Context) *Asset {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssetCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssetCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AssetCreate) defaults() {
	if _, ok := ac.mutation.Quantity(); !ok {
		v := asset.DefaultQuantity
		ac.mutation.SetQuantity(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := asset.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssetCreate) check() error {
	if _, ok := ac.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`ent: missing required field "Asset.location_id"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Asset.name"`)}
	}
	if _, ok := ac.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Asset.quantity"`)}
	}
	if _, ok := ac.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required edge "Asset.location"`)}
	}
	return nil
}

func (ac *AssetCreate) sqlSave(ctx context.Context) (*Asset, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AssetCreate) createSpec() (*Asset, *sqlgraph.CreateSpec) {
	var (
		_node = &Asset{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(asset.Table, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Quantity(); ok {
		_spec.SetField(asset.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := ac.mutation.ModelNumber(); ok {
		_spec.SetField(asset.FieldModelNumber, field.TypeString, value)
		_node.ModelNumber = value
	}
	if value, ok := ac.mutation.SerialNumber(); ok {
		_spec.SetField(asset.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if nodes := ac.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.ParentTable,
			Columns: []string{asset.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ChildrenTable,
			Columns: []string{asset.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.LocationTable,
			Columns: []string{asset.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   asset.TagsTable,
			Columns: asset.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AssetTagCreate{config: ac.config, mutation: newAssetTagMutation(ac.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AssetTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   asset.AssetTagsTable,
			Columns: []string{asset.AssetTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssetCreateBulk is the builder for creating many Asset entities in bulk.
type AssetCreateBulk struct {
	config
	builders []*AssetCreate
}

// Save creates the Asset entities in the database.
func (acb *AssetCreateBulk) Save(ctx context.Context) ([]*Asset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Asset, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssetCreateBulk) SaveX(ctx context.Context) []*Asset {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssetCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssetCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
